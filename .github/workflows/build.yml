name: COBOL Compilation and Deployment  

on:  
  pull_request:  
    types: [closed]  
    branches:  
      - main  
      - 'release c'  
      - 'release f'  
      - 'release p'  

jobs:  
  COBOL-Compilation:  
    # Only run if the PR was merged  
    if: github.event.pull_request.merged == true  
    runs-on: [self-hosted]  
    
    steps:  
      - name: Check out repository code  
        uses: actions/checkout@v3  
        with:  
          fetch-depth: 0  
      
      - name: Get modified files from PR  
        id: changes  
        shell: pwsh  
        run: |  
          $baseSha = "${{ github.event.pull_request.base.sha }}"  
          $headSha = "${{ github.event.pull_request.head.sha }}"  
          
          # Get changed files with extension filtering  
          $changedFilesToCompile = git diff --name-only --diff-filter=ACMRT $baseSha $headSha | Where-Object { $_ -match '\.(CBL|cbl|cpy|CPY|bms|BMS)$' }  
          $bmsFilesToCompile = $changedFilesToCompile | Where-Object { $_ -match '\.(bms|BMS)$' }  
          $cpyFilesToCompile = $changedFilesToCompile | Where-Object { $_ -match '\.(cpy|CPY)$' }  
          $cblFilesToCompile = $changedFilesToCompile | Where-Object { $_ -match '\.(cbl|CBL)$' }  
          
          Write-Host "Files to compile:"  
          Write-Host "BMS files: $($bmsFilesToCompile -join ', ')"  
          Write-Host "CPY files: $($cpyFilesToCompile -join ', ')"  
          Write-Host "CBL files: $($cblFilesToCompile -join ', ')"  
          
          # Set environment variables for file lists  
          if ($bmsFilesToCompile) {  
            echo "bms_files=$($bmsFilesToCompile -join ';')" >> $env:GITHUB_ENV  
            echo "bms=y" >> $env:GITHUB_ENV  
          } else {  
            echo "bms=n" >> $env:GITHUB_ENV  
          }  
          
          if ($cpyFilesToCompile) {  
            echo "cpy_files=$($cpyFilesToCompile -join ';')" >> $env:GITHUB_ENV  
            echo "cpy=y" >> $env:GITHUB_ENV  
          } else {  
            echo "cpy=n" >> $env:GITHUB_ENV  
          }  
          
          if ($cblFilesToCompile) {  
            echo "cbl_files=$($cblFilesToCompile -join ';')" >> $env:GITHUB_ENV  
            echo "cbl=y" >> $env:GITHUB_ENV  
          } else {  
            echo "cbl=n" >> $env:GITHUB_ENV  
          }  

      - name: Setup Environment Based on Target Branch  
        id: env_setup  
        shell: pwsh  
        run: |  
          # Get target branch of the PR  
          $targetBranch = "${{ github.event.pull_request.base.ref }}"  
          Write-Host "Target branch: $targetBranch"  
          
          # Set environment name based on branch  
          switch ($targetBranch) {  
            "main" {  
              $envName = "SHARED"  
            }  
            "release c" {  
              $envName = "CICSTSTQ"  
            }  
            "release f" {  
              $envName = "CICSTSTG"  
            }  
            "release p" {  
              $envName = "CICSWCS2"  
            }  
            default {  
              $envName = "CICSTSTQ"  
            }  
          }  
          
          # Create script directory if it doesn't exist  
          if (-not (Test-Path "${{ github.workspace }}\Scripts")) {  
            New-Item -Path "${{ github.workspace }}\Scripts" -ItemType Directory -Force  
          }  
          
          # Set build script path  
          $scriptPath = "${{ github.workspace }}\Scripts\Consolidated_Compile.bat"  
          echo "ENV_NAME=$envName" >> $env:GITHUB_ENV  
          echo "TARGET_BRANCH=$targetBranch" >> $env:GITHUB_ENV  
          echo "BUILD_SCRIPT=$scriptPath" >> $env:GITHUB_ENV  
          
          # Set build tag using git commit info  
          $buildTag = git log -1 --format='%h--%ad' --date=format-local:'%Y-%m-%d-%H%M%S'  
          echo "BUILD_TAG=$buildTag" >> $env:GITHUB_ENV  
          
          # Set source and target directories  
          $basePath = "C:\Git\rocket\Rehost"  
          $buildBase = "C:\Git\rocket\Rehost"  
          $sourceBase = "C:\Git\rocket\Rehost"  
          
          echo "BASE_PATH=$basePath" >> $env:GITHUB_ENV  
          echo "BUILD_BASE=$buildBase" >> $env:GITHUB_ENV  
          echo "SOURCE_BASE=$sourceBase" >> $env:GITHUB_ENV  

          # echo "CBL_DIR=$sourceBase\cbl" >> $env:GITHUB_ENV  
          # echo "BMS_DIR=$sourceBase\bms" >> $env:GITHUB_ENV  
          # echo "CPY_DIR=$sourceBase\cpy" >> $env:GITHUB_ENV  
          # echo "BMS_CPY=$sourceBase\bmscpy" >> $env:GITHUB_ENV  

          echo "CBL_DIR=$sourceBase" >> $env:GITHUB_ENV  
          echo "BMS_DIR=$sourceBase" >> $env:GITHUB_ENV  
          echo "CPY_DIR=$sourceBase" >> $env:GITHUB_ENV  
          echo "BMS_CPY=$sourceBase" >> $env:GITHUB_ENV  

          
          # Display configuration  
          Write-Host "Environment: $envName (from branch: $targetBranch)"  
          Write-Host "Build Tag: $buildTag"  

      - name: Create Compilation Script  
        id: create_script  
        shell: pwsh  
        run: |  
          # Create script content - this is the simplified script from above  
          $scriptContent = @'  
@echo off  
setlocal enabledelayedexpansion  

REM =====================================================================  
REM === CONSOLIDATED COBOL AND BMS COMPILATION SCRIPT                 ===  
REM =====================================================================  

REM =====================================================================  
REM === SECTION 1: CONFIGURABLE PARAMETERS                           ===  
REM =====================================================================  

:PARAMETERS  
REM Base directories - Modify these for your environment  
set base=C:\Git\rocket\Rehost  
set build_base=C:\Git\rocket\Rehost  
set source_base=C:\Git\rocket\Rehost  
set loadlib=%build_base%\loadlib  
set listing=%build_base%\listing  
set logdir=C:\Temp\logs  

REM Copybook directories  
# set cpy_dir=%source_base%\cpy  
# set bms_cpy=%source_base%\bmscpy  

set cpy_dir=%source_base%
set bms_cpy=%source_base%

REM Default directories for types  
# set cbl_dir=%source_base%\cbl  
# set bms_dir=%source_base%\bms  

set cbl_dir=%source_base%
set bms_dir=%source_base%

REM Type of file to compile and name  
set modtype=%1  
set modname=%2  

REM Target execution path - will be set based on environment  
if "%3"=="" (  
  set target_env=CICSTSTQ  
) else (  
  set target_env=%3  
)  

REM Set the target execution path based on environment  
set execpath=C:\ES\%target_env%\LOADLIB

REM COBOL programs to bypass compilation  
set BYPASSCBL="XXXXXXXX"  

REM =====================================================================  
REM === SECTION 2: INITIALIZATION                                    ===  
REM =====================================================================  

:INIT  
REM Normalize parameters  
for /f "tokens=*" %%V in ('powershell -command "$ENV:modtype.toUpper()"') do set modtype=%%V  
for /f "tokens=*" %%V in ('powershell -command "$ENV:modname.toUpper()"') do set modname=%%V  
for /f "tokens=*" %%V in ('powershell -command "$ENV:target_env.toUpper()"') do set target_env=%%V  

REM Set date and time for logging  
set mydate=%date:/=-%  
set mydate=%mydate: =%  
set mytime=%time::=.%  
set mytime=%mytime: =%  

REM Setup Enterprise Developer environment if not already set  
if not defined COBDIR (  
  echo Setting up Enterprise Developer environment...  
  call "%ProgramFiles(x86)%\Micro Focus\Enterprise Developer\SetupEnv.bat"  
)  

REM Set log file  
set logfile=%logdir%\Compile_%mydate%_%mytime%.log  

REM Create directories if they don't exist  
if not exist "%source_base%" mkdir "%source_base%"  
if not exist "%cpy_dir%" mkdir "%cpy_dir%"  
if not exist "%bms_cpy%" mkdir "%bms_cpy%"  
if not exist "%cbl_dir%" mkdir "%cbl_dir%"  
if not exist "%bms_dir%" mkdir "%bms_dir%"  
if not exist "%loadlib%" mkdir "%loadlib%"  
if not exist "%listing%\BMS" mkdir "%listing%\BMS"   
if not exist "%listing%\CBL" mkdir "%listing%\CBL"  
if not exist "%logdir%" mkdir "%logdir%"  
if not exist "%execpath%" mkdir "%execpath%"  

REM =====================================================================  
REM === SECTION 3: COMPILATION LOGIC                                 ===  
REM =====================================================================  

:COMPILE  
echo ===================================================================  
echo === COMPILING %modtype% MODULE: %modname% for %target_env% environment  
echo ===================================================================  
echo ===================================================================>> %logfile%  
echo === COMPILING %modtype% MODULE: %modname% for %target_env% environment>> %logfile%  
echo ===================================================================>> %logfile%  

if "%modtype%"=="BMS" (  
  call :COMPILE_BMS  
) else if "%modtype%"=="CBL" (  
  call :COMPILE_COBOL  
) else (  
  echo ERROR: Invalid module type specified: %modtype%  
  echo Valid types are BMS or CBL  
  exit /b 12  
)  

goto :EXIT  

REM =====================================================================  
REM === SECTION 4: BMS COMPILATION                                   ===  
REM =====================================================================  

:COMPILE_BMS  
echo Compiling BMS map: %modname%  
echo Compiling BMS map: %modname%>> %logfile%  

set source_file=%bms_dir%\%modname%.bms  
if not exist "%source_file%" (  
  echo ERROR: BMS source file not found: %source_file%  
  echo ERROR: BMS source file not found: %source_file%>> %logfile%  
  exit /b 8  
)  

echo MFBMSCL %source_file% /BINARY=%loadlib%\ /COBOL="%bms_cpy%"\ /VERBOSE /SDF /HLL /IGNORE /SYSPARM=MAP /SYSPARM=DSECT /MAP=%modname% /DSECT=%modname%>> %logfile%  
MFBMSCL %source_file% /BINARY=%loadlib%\ /COBOL="%bms_cpy%"\ /VERBOSE /SDF /HLL /IGNORE /SYSPARM=MAP /SYSPARM=DSECT /MAP=%modname% /DSECT=%modname%>> %logfile% 2>&1  

set _rc=%errorlevel%  

REM Copy .cpy file if generated  
if exist "%modname%.cpy" (  
  move /Y "%modname%.cpy" "%bms_cpy%\%modname%.cpy">> %logfile% 2>&1  
  echo Moved copybook to %bms_cpy%\%modname%.cpy  
  echo Moved copybook to %bms_cpy%\%modname%.cpy>> %logfile%  
)  

REM Copy compiled module to target execution directory  
if %_rc% leq 8 (  
  copy /Y "%loadlib%\%modname%.MOD" "%execpath%\%modname%.MOD">> %logfile% 2>&1  
  echo Copied compiled module to %execpath%\%modname%.MOD  
  echo Copied compiled module to %execpath%\%modname%.MOD>> %logfile%  
)  

exit /b %_rc%  

REM =====================================================================  
REM === SECTION 5: COBOL COMPILATION                                 ===  
REM =====================================================================  

:COMPILE_COBOL  
echo Compiling COBOL program: %modname%  
echo Compiling COBOL program: %modname%>> %logfile%  

REM Check if in bypass list  
for %%G in (%BYPASSCBL%) do (  
  if "%%~G"=="%modname%" (  
    echo Bypassing %modname% - Marked as Do Not Compile  
    echo Bypassing %modname% - Marked as Do Not Compile>> %logfile%  
    exit /b 1  
  )  
)  

set source_file=%cbl_dir%\%modname%.cbl  
if not exist "%source_file%" (  
  echo ERROR: COBOL source file not found: %source_file%  
  echo ERROR: COBOL source file not found: %source_file%>> %logfile%  
  exit /b 8  
)  

REM Get directives file  
set directives=C:\ES\SHARED\DIRECTIVES\%modname%.dir  
if not exist "%directives%" (  
  set directives=C:\ES\SHARED\DIRECTIVES\CBL.dir  
  
  REM Create default directive file if it doesn't exist  
  if not exist "%directives%" (  
    echo Creating default directive file: %directives%  
    echo Creating default directive file: %directives%>> %logfile%  
    
    if not exist "%build_base%\directives" mkdir "%build_base%\directives"  
    
    echo sourcetabs >> "%directives%"  
    echo cicsecm(int) >> "%directives%"  
    echo charset(ascii) >> "%directives%"  
    echo dialect(mf) >> "%directives%"  
    echo anim >> "%directives%"  
  )  
)  

REM Setup COBCPY environment  
set COBCPY=%bms_cpy%;%cpy_dir%;%COBCPY%  
echo Using COBCPY=%COBCPY%>> %logfile%  

REM Run the compilation  
echo cobol %source_file%,nul, %listing%\CBL\%modname%.lst,nul, ANIM GNT(%loadlib%\%modname%.gnt) COBIDY(%loadlib%) USE(%directives%) NOQUERY ;>> %logfile%  
cobol %source_file%,nul, %listing%\CBL\%modname%.lst,nul, ANIM GNT(%loadlib%\%modname%.gnt) COBIDY(%loadlib%) USE(%directives%) NOQUERY ;>> %logfile% 2>&1  

set _rc=%errorlevel%  

REM Copy compiled files to execution directory if successful  
if %_rc% leq 8 (  
  copy /Y "%loadlib%\%modname%.gnt" "%execpath%\%modname%.gnt">> %logfile% 2>&1  
  copy /Y "%loadlib%\%modname%.idy" "%execpath%\%modname%.idy">> %logfile% 2>&1  
  echo Copied compiled files to execution directory: %execpath%  
  echo Copied compiled files to execution directory: %execpath%>> %logfile%  
)  

exit /b %_rc%  

REM =====================================================================  
REM === SECTION 6: EXIT                                              ===  
REM =====================================================================  

:EXIT  
echo Compilation complete with return code %_rc%  
echo Compilation complete with return code %_rc%>> %logfile%  
exit /b %_rc%  
'@  

          # Write the script to file  
          $scriptContent | Out-File -FilePath "${{ env.BUILD_SCRIPT }}" -Encoding ascii  
          
          Write-Host "Created compilation script at ${{ env.BUILD_SCRIPT }}"  

      - name: Copy Source Files to Build Directory  
        id: copy_source  
        shell: pwsh  
        run: |  
          # Create target directories if they don't exist  
          $directories = @(  
            "${{ env.CBL_DIR }}",  
            "${{ env.BMS_DIR }}",  
            "${{ env.CPY_DIR }}",  
            "${{ env.BMS_CPY }}"  
          )  
          foreach ($dir in $directories) {  
            if (-not (Test-Path $dir)) {   
              New-Item -Path $dir -ItemType Directory -Force  
              Write-Host "Created directory: $dir"  
            }  
          }  
          
          # Copy BMS files  
          if ("$env:bms" -eq "y") {  
            foreach ($file in ("$env:bms_files" -split ";")) {  
              $filename = Split-Path $file -Leaf  
              Copy-Item "${{ github.workspace }}/$file" -Destination "${{ env.BMS_DIR }}/$filename" -Force  
              Write-Host "Copied BMS file: $file to ${{ env.BMS_DIR }}/$filename"  
            }  
          }  
          
          # Copy CPY files  
          if ("$env:cpy" -eq "y") {  
            foreach ($file in ("$env:cpy_files" -split ";")) {  
              $filename = Split-Path $file -Leaf  
              Copy-Item "${{ github.workspace }}/$file" -Destination "${{ env.CPY_DIR }}/$filename" -Force  
              Write-Host "Copied CPY file: $file to ${{ env.CPY_DIR }}/$filename"  
            }  
          }  
          
          # Copy COBOL files  
          if ("$env:cbl" -eq "y") {  
            foreach ($file in ("$env:cbl_files" -split ";")) {  
              $filename = Split-Path $file -Leaf  
              Copy-Item "${{ github.workspace }}/$file" -Destination "${{ env.CBL_DIR }}/$filename" -Force  
              Write-Host "Copied COBOL file: $file to ${{ env.CBL_DIR }}/$filename"  
            }  
          }  

      - name: Compile Modified Files  
        id: build  
        shell: cmd  
        run: |  
          @echo off  
          setlocal enabledelayedexpansion  
          
          echo Starting compilation of modified files for environment: %ENV_NAME%  
          
          set compilation_exit_code=0  
          
          rem Compile BMS files first if any  
          if "%bms%" == "y" (  
            for /F "tokens=*" %%f in ('powershell -Command "$env:bms_files -split '';''"') do (  
              set "fullpath=%%f"  
              for %%F in ("!fullpath!") do (  
                set "filename=%%~nF"  
                echo Compiling BMS file: !filename!  
                call "%BUILD_SCRIPT%" BMS !filename! %ENV_NAME%  
                if !errorlevel! neq 0 set compilation_exit_code=!errorlevel!  
              )  
            )  
          )  
          
          rem Compile COBOL files  
          if "%cbl%" == "y" (  
            for /F "tokens=*" %%f in ('powershell -Command "$env:cbl_files -split '';''"') do (  
              set "fullpath=%%f"  
              for %%F in ("!fullpath!") do (  
                set "filename=%%~nF"  
                echo Compiling COBOL file: !filename!  
                call "%BUILD_SCRIPT%" CBL !filename! %ENV_NAME%  
                if !errorlevel! neq 0 set compilation_exit_code=!errorlevel!  
              )  
            )  
          )  
          
          echo compilation_exit_code=%compilation_exit_code% >> %GITHUB_ENV%  
          echo Compilation completed with exit code: %compilation_exit_code%  

      - name: Create Artifact  
        id: artifact_prep  
        if: env.compilation_exit_code == '0'  
        shell: pwsh  
        run: |  
          $artifactPath = "${{ env.BUILD_BASE }}\artifact-${{ env.ENV_NAME }}-${{ env.BUILD_TAG }}"  
          
          # Create artifact directories  
          New-Item -Path "$artifactPath" -ItemType Directory -Force  
          New-Item -Path "$artifactPath\source" -ItemType Directory -Force  
          New-Item -Path "$artifactPath\loadlib" -ItemType Directory -Force  
          New-Item -Path "$artifactPath\logs" -ItemType Directory -Force  
          
          # Copy source files to artifact  
          if ("$env:bms" -eq "y") {  
            foreach ($file in ("$env:bms_files" -split ";")) {  
              $filename = Split-Path $file -Leaf  
              Copy-Item "${{ github.workspace }}/$file" -Destination "$artifactPath\source\$filename" -Force  
            }  
          }  
          
          if ("$env:cbl" -eq "y") {  
            foreach ($file in ("$env:cbl_files" -split ";")) {  
              $filename = Split-Path $file -Leaf  
              Copy-Item "${{ github.workspace }}/$file" -Destination "$artifactPath\source\$filename" -Force  
            }  
          }  
          
          # Copy latest log file  
          Get-ChildItem "${{ env.BUILD_BASE }}\logs" -Filter "Compile_*_*.log" |   
            Sort-Object LastWriteTime -Descending |   
            Select-Object -First 1 |   
            Copy-Item -Destination "$artifactPath\logs\" -Force  
          
          # Copy compiled files  
          if ("$env:bms" -eq "y") {  
            foreach ($file in ("$env:bms_files" -split ";")) {  
              $basename = [System.IO.Path]::GetFileNameWithoutExtension($file)  
              $modFile = "${{ env.BUILD_BASE }}\loadlib\$basename.MOD"  
              if (Test-Path $modFile) {  
                Copy-Item $modFile -Destination "$artifactPath\loadlib\" -Force  
              }  
            }  
          }  
          
          if ("$env:cbl" -eq "y") {  
            foreach ($file in ("$env:cbl_files" -split ";")) {  
              $basename = [System.IO.Path]::GetFileNameWithoutExtension($file)  
              $gntFile = "${{ env.BUILD_BASE }}\loadlib\$basename.gnt"  
              $idyFile = "${{ env.BUILD_BASE }}\loadlib\$basename.idy"  
              
              if (Test-Path $gntFile) { Copy-Item $gntFile -Destination "$artifactPath\loadlib\" -Force }  
              if (Test-Path $idyFile) { Copy-Item $idyFile -Destination "$artifactPath\loadlib\" -Force }  
              if (Test-Path $bndFile) { Copy-Item $bndFile -Destination "$artifactPath\loadlib\" -Force }  
            }  
          }  
          
          echo "artifact_path=$artifactPath" >> $env:GITHUB_ENV  

      - name: Upload Artifact  
        if: env.compilation_exit_code == '0'  
        uses: actions/upload-artifact@v4  
        with:  
          name: ${{ env.ENV_NAME }}-${{ env.BUILD_TAG }}  
          path: ${{ env.artifact_path }}  

      - name: Report Results  
        run: |  
          Write-Host "Compilation job results:"  
          Write-Host "Target Branch: ${{ env.TARGET_BRANCH }}"  
          Write-Host "Environment: ${{ env.ENV_NAME }}"  
          Write-Host "Build Tag: ${{ env.BUILD_TAG }}"  
          
          if ("${{ env.compilation_exit_code }}" -eq "0") {  
            Write-Host "✅ Compilation completed successfully"  
          } else {  
            Write-Host "❌ Compilation failed with exit code ${{ env.compilation_exit_code }}"  
          }

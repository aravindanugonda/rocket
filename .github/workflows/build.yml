name: COBOL Compilation and Deployment  

on:  
  pull_request:  
    types: [closed]  
    branches:  
      - main  
      - 'release-c'  
      - 'release-f'  
      - 'release-p'  
  workflow_dispatch:       

jobs:  
  COBOL-Compilation:  
    # Only run if the PR was merged  
    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
    runs-on: DESKTOP-Q50ERNH
    
    steps:  
      - name: Check out repository code  
        uses: actions/checkout@v3  
        with:  
          fetch-depth: 0  
      
      - name: Get modified files from PR  
        id: changes  
        shell: pwsh  
        run: |  
          $baseSha = "${{ github.event.pull_request.base.sha }}"  
          $headSha = "${{ github.event.pull_request.head.sha }}"  
          
          # Get changed files with extension filtering  
          $changedFilesToCompile = git diff --name-only --diff-filter=ACMRT $baseSha $headSha | Where-Object { $_ -match '\.(CBL|cbl|cpy|CPY|bms|BMS)$' }  
          $bmsFilesToCompile = $changedFilesToCompile | Where-Object { $_ -match '\.(bms|BMS)$' }  
          $cpyFilesToCompile = $changedFilesToCompile | Where-Object { $_ -match '\.(cpy|CPY)$' }  
          $cblFilesToCompile = $changedFilesToCompile | Where-Object { $_ -match '\.(cbl|CBL)$' }  
          
          Write-Host "Files to compile:"  
          Write-Host "BMS files: $($bmsFilesToCompile -join ', ')"  
          Write-Host "CPY files: $($cpyFilesToCompile -join ', ')"  
          Write-Host "CBL files: $($cblFilesToCompile -join ', ')"  
          
          # Set environment variables for file lists  
          if ($bmsFilesToCompile) {  
            echo "bms_files=$($bmsFilesToCompile -join ';')" >> $env:GITHUB_ENV  
            echo "bms=y" >> $env:GITHUB_ENV  
          } else {  
            echo "bms=n" >> $env:GITHUB_ENV  
          }  
          
          if ($cpyFilesToCompile) {  
            echo "cpy_files=$($cpyFilesToCompile -join ';')" >> $env:GITHUB_ENV  
            echo "cpy=y" >> $env:GITHUB_ENV  
          } else {  
            echo "cpy=n" >> $env:GITHUB_ENV  
          }  
          
          if ($cblFilesToCompile) {  
            echo "cbl_files=$($cblFilesToCompile -join ';')" >> $env:GITHUB_ENV  
            echo "cbl=y" >> $env:GITHUB_ENV  
          } else {  
            echo "cbl=n" >> $env:GITHUB_ENV  
          }  

      - name: Setup Environment Based on Target Branch  
        id: env_setup  
        shell: pwsh  
        run: |  
          # Get target branch of the PR  
          $targetBranch = "${{ github.event.pull_request.base.ref }}"  
          Write-Host "Target branch: $targetBranch"  
          
          # Set environment name based on branch  
          switch ($targetBranch) {  
            "main" {  
              $envName = "SHARED"  
            }  
            "release-c" {  
              $envName = "CICSTSTQ"  
            }  
            "release-f" {  
              $envName = "CICSTSTG"  
            }  
            "release-p" {  
              $envName = "CICSWCS2"  
            }  
            default {  
              $envName = "CICSTSTQ"  
            }  
          }  
          
          # Set  script path (already exists)  
          $scriptPath = "${{ github.workspace }}\Scripts\build.bat"  
          echo "ENV_NAME=$envName" >> $env:GITHUB_ENV  
          echo "TARGET_BRANCH=$targetBranch" >> $env:GITHUB_ENV  
          echo "BUILD_SCRIPT=$scriptPath" >> $env:GITHUB_ENV  
          
          # Set build tag using git commit info  
          $buildTag = git log -1 --format='%h--%ad' --date=format-local:'%Y-%m-%d-%H%M%S'  
          echo "BUILD_TAG=$buildTag" >> $env:GITHUB_ENV  
          
          # Set source and target directories  
          $basePath = "C:\Git\rocket\Rehost"  
          $buildBase = "C:\Git\rocket\Rehost"  
          $sourceBase = "C:\Git\rocket\Rehost"  
          
          echo "BASE_PATH=$basePath" >> $env:GITHUB_ENV  
          echo "BUILD_BASE=$buildBase" >> $env:GITHUB_ENV  
          echo "SOURCE_BASE=$sourceBase" >> $env:GITHUB_ENV  
          echo "CBL_DIR=$sourceBase" >> $env:GITHUB_ENV  
          echo "BMS_DIR=$sourceBase" >> $env:GITHUB_ENV  
          echo "CPY_DIR=$sourceBase" >> $env:GITHUB_ENV  
          echo "BMS_CPY=$sourceBase" >> $env:GITHUB_ENV  
          
          # Display configuration  
          Write-Host "Environment: $envName (from branch: $targetBranch)"  
          Write-Host "Build Tag: $buildTag"  

      - name: Copy Source Files to Build Directory  
        id: copy_source  
        shell: pwsh  
        run: |  
          # Create target directories if they don't exist  
          $directories = @(  
            "${{ env.CBL_DIR }}",  
            "${{ env.BMS_DIR }}",  
            "${{ env.CPY_DIR }}",  
            "${{ env.BMS_CPY }}"  
          )  
          foreach ($dir in $directories) {  
            if (-not (Test-Path $dir)) {   
              New-Item -Path $dir -ItemType Directory -Force  
              Write-Host "Created directory: $dir"  
            }  
          }  
          
          # Copy BMS files  
          if ("$env:bms" -eq "y") {  
            foreach ($file in ("$env:bms_files" -split ";")) {  
              $filename = Split-Path $file -Leaf  
              Copy-Item "${{ github.workspace }}/$file" -Destination "${{ env.BMS_DIR }}/$filename" -Force  
              Write-Host "Copied BMS file: $file to ${{ env.BMS_DIR }}/$filename"  
            }  
          }  
          
          # Copy CPY files  
          if ("$env:cpy" -eq "y") {  
            foreach ($file in ("$env:cpy_files" -split ";")) {  
              $filename = Split-Path $file -Leaf  
              Copy-Item "${{ github.workspace }}/$file" -Destination "${{ env.CPY_DIR }}/$filename" -Force  
              Write-Host "Copied CPY file: $file to ${{ env.CPY_DIR }}/$filename"  
            }  
          }  
          
          # Copy COBOL files  
          if ("$env:cbl" -eq "y") {  
            foreach ($file in ("$env:cbl_files" -split ";")) {  
              $filename = Split-Path $file -Leaf  
              Copy-Item "${{ github.workspace }}/$file" -Destination "${{ env.CBL_DIR }}/$filename" -Force  
              Write-Host "Copied COBOL file: $file to ${{ env.CBL_DIR }}/$filename"  
            }  
          }  

      - name: Compile Modified Files  
        id: build  
        shell: cmd  
        run: |  
          @echo off  
          setlocal enabledelayedexpansion  
          
          echo Starting compilation of modified files for environment: %ENV_NAME%  
          
          set compilation_exit_code=0  
          
          rem Compile BMS files first if any  
          if "%bms%" == "y" (  
            for /F "tokens=*" %%f in ('powershell -Command "$env:bms_files -split '';''"') do (  
              set "fullpath=%%f"  
              for %%F in ("!fullpath!") do (  
                set "filename=%%~nF"  
                echo Compiling BMS file: !filename!  
                call "%BUILD_SCRIPT%" BMS !filename! %ENV_NAME%  
                if !errorlevel! neq 0 set compilation_exit_code=!errorlevel!  
              )  
            )  
          )  
          
          rem Compile COBOL files  
          if "%cbl%" == "y" (  
            for /F "tokens=*" %%f in ('powershell -Command "$env:cbl_files -split '';''"') do (  
              set "fullpath=%%f"  
              for %%F in ("!fullpath!") do (  
                set "filename=%%~nF"  
                echo Compiling COBOL file: !filename!  
                call "%BUILD_SCRIPT%" CBL !filename! %ENV_NAME%  
                if !errorlevel! neq 0 set compilation_exit_code=!errorlevel!  
              )  
            )  
          )  
          
          echo compilation_exit_code=%compilation_exit_code% >> %GITHUB_ENV%  
          echo Compilation completed with exit code: %compilation_exit_code%  

      - name: Create Artifact  
        id: artifact_prep  
        if: env.compilation_exit_code == '0'  
        shell: pwsh  
        run: |  
          $artifactPath = "${{ env.BUILD_BASE }}\artifact-${{ env.ENV_NAME }}-${{ env.BUILD_TAG }}"  
          
          # Create artifact directories  
          New-Item -Path "$artifactPath" -ItemType Directory -Force  
          New-Item -Path "$artifactPath\source" -ItemType Directory -Force  
          New-Item -Path "$artifactPath\loadlib" -ItemType Directory -Force  
          New-Item -Path "$artifactPath\logs" -ItemType Directory -Force  
          
          # Copy source files to artifact  
          if ("$env:bms" -eq "y") {  
            foreach ($file in ("$env:bms_files" -split ";")) {  
              $filename = Split-Path $file -Leaf  
              Copy-Item "${{ github.workspace }}/$file" -Destination "$artifactPath\source\$filename" -Force  
            }  
          }  
          
          if ("$env:cbl" -eq "y") {  
            foreach ($file in ("$env:cbl_files" -split ";")) {  
              $filename = Split-Path $file -Leaf  
              Copy-Item "${{ github.workspace }}/$file" -Destination "$artifactPath\source\$filename" -Force  
            }  
          }  
          
          # Copy latest log file from C:\Temp\logs  
          $logPath = "C:\Temp\logs"  
          if (Test-Path $logPath) {  
            Get-ChildItem $logPath -Filter "Compile_*_*.log" |   
              Sort-Object LastWriteTime -Descending |   
              Select-Object -First 1 |   
              Copy-Item -Destination "$artifactPath\logs\" -Force  
          }  
          
          # Copy compiled files  
          if ("$env:bms" -eq "y") {  
            foreach ($file in ("$env:bms_files" -split ";")) {  
              $basename = [System.IO.Path]::GetFileNameWithoutExtension($file)  
              $modFile = "${{ env.BUILD_BASE }}\loadlib\$basename.MOD"  
              if (Test-Path $modFile) {  
                Copy-Item $modFile -Destination "$artifactPath\loadlib\" -Force  
              }  
            }  
          }  
          
          if ("$env:cbl" -eq "y") {  
            foreach ($file in ("$env:cbl_files" -split ";")) {  
              $basename = [System.IO.Path]::GetFileNameWithoutExtension($file)  
              $gntFile = "${{ env.BUILD_BASE }}\loadlib\$basename.gnt"  
              $idyFile = "${{ env.BUILD_BASE }}\loadlib\$basename.idy"  
              $bndFile = "${{ env.BUILD_BASE }}\loadlib\$basename.bnd"  
              
              if (Test-Path $gntFile) { Copy-Item $gntFile -Destination "$artifactPath\loadlib\" -Force }  
              if (Test-Path $idyFile) { Copy-Item $idyFile -Destination "$artifactPath\loadlib\" -Force }  
              if (Test-Path $bndFile) { Copy-Item $bndFile -Destination "$artifactPath\loadlib\" -Force }  
            }  
          }  
          
          echo "artifact_path=$artifactPath" >> $env:GITHUB_ENV  

      - name: Upload Artifact  
        if: env.compilation_exit_code == '0'  
        uses: actions/upload-artifact@v4  
        with:  
          name: ${{ env.ENV_NAME }}-${{ env.BUILD_TAG }}  
          path: ${{ env.artifact_path }}  

      - name: Report Results  
        run: |  
          Write-Host "Compilation job results:"  
          Write-Host "Target Branch: ${{ env.TARGET_BRANCH }}"  
          Write-Host "Environment: ${{ env.ENV_NAME }}"  
          Write-Host "Build Tag: ${{ env.BUILD_TAG }}"  
          
          if ("${{ env.compilation_exit_code }}" -eq "0") {  
            Write-Host "✅ Compilation completed successfully"  
          } else {  
            Write-Host "❌ Compilation failed with exit code ${{ env.compilation_exit_code }}"  
          }
